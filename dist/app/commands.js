(()=>{"use strict";async function t(t){await Excel.run((async e=>{const a=e.workbook.getSelectedRange();a.values=[[t]],a.format.autofitColumns(),await e.sync()}))}const e=new class{constructor(){this._mode=null}async setMode(t){this._mode=t,await OfficeRuntime.storage.setItem("snip-mode",t),await Office.addin.showAsTaskpane()}async current(){return this._mode?this._mode:OfficeRuntime.storage.getItem("snip-mode")}async clearMode(){this._mode=null,await OfficeRuntime.storage.removeItem("snip-mode")}async isActive(){return null!==await this.current()}};Office.onReady((()=>{Office.context.document.addHandlerAsync(Office.EventType.DocumentSelectionChanged,(async()=>{try{const a=await e.current();"validation"===a&&(await async function(){await t("✓")}(),await e.clearMode()),"exception"===a&&(await async function(){await t("✗")}(),await e.clearMode())}catch(t){console.warn("Error handling selection change:",t)}}))})),Office.onReady((()=>{console.log("Commands module loaded")})),Office.actions.associate("textSnip",(async function(){try{await e.setMode("text"),console.log("Text snip mode activated")}catch(t){console.error("Error activating text snip:",t)}})),Office.actions.associate("sumSnip",(async function(){try{await e.setMode("sum"),console.log("Sum snip mode activated")}catch(t){console.error("Error activating sum snip:",t)}})),Office.actions.associate("tableSnip",(async function(){try{await e.setMode("table"),console.log("Table snip mode activated")}catch(t){console.error("Error activating table snip:",t)}})),Office.actions.associate("validationSnip",(async function(){try{await e.setMode("validation"),console.log("Validation snip mode activated")}catch(t){console.error("Error activating validation snip:",t)}})),Office.actions.associate("exceptionSnip",(async function(){try{await e.setMode("exception"),console.log("Exception snip mode activated")}catch(t){console.error("Error activating exception snip:",t)}}))})();